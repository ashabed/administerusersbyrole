<?php

  $autoload = __DIR__ . '/vendor/autoload.php';
  if (file_exists($autoload)) {
    require_once $autoload;
  }

/**
 * Generates a permission string for a given a role name.
 */
function _administerusersbyrole_build_perm_string($role_name, $op = 'edit', $other = FALSE) {
  $perm = "$op users with role ";
  $perm .= preg_replace('/[^a-zA-Z0-9]/', '', $role_name);
  if ($other) {
    $perm .= ' and other roles';
  }
  return $perm;
}
/*
function _administerusersbyrole_can_edit_user($account) {
  $user = \Drupal::currentUser();
  $account = User::load($uid);

  if ($account->uid == $user->uid) {
    return TRUE;
  }

  // allow only uid1 to edit uid1
  if ($account->uid == 1) {
    return FALSE;
  }

  if ($account->roles === array(DRUPAL_AUTHENTICATED_RID => 'authenticated user')) {
    if (!user_access('edit users with no custom roles')) {
      return FALSE;
    }
  }

  $allow = TRUE;
  foreach ($account->roles as $rid => $role) {
    if ($rid === DRUPAL_AUTHENTICATED_RID) {
      continue;
    }
    if (user_access(_administerusersbyrole_build_perm_string($role, 'edit', TRUE))) {
      return TRUE;
    }
    if (!user_access(_administerusersbyrole_build_perm_string($role, 'edit', FALSE))) {
      $allow = FALSE;
    }
  }
  return $allow;
}

function _administerusersbyrole_can_cancel_user($account) {
  if ($account->uid == 1) {
    return FALSE;
  }

  if ($account->roles === array(DRUPAL_AUTHENTICATED_RID => 'authenticated user')) {
    if (!user_access('cancel users with no custom roles')) {
      return FALSE;
    }
  }

  $allow = TRUE;
  foreach ($account->roles as $rid => $role) {
    if ($rid === DRUPAL_AUTHENTICATED_RID) {
      continue;
    }
    if (user_access(_administerusersbyrole_build_perm_string($role, 'cancel', TRUE))) {
      return TRUE;
    }
    if (!user_access(_administerusersbyrole_build_perm_string($role, 'cancel', FALSE))) {
      $allow = FALSE;
    }
  }
  return $allow;
}
*/
