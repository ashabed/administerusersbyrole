<?php

/**
 * Generates a permission string for a given a role name.
 */
function _administerusersbyrole_build_perm_string($role_name, $op = 'edit', $other = FALSE) {
  $perm = "$op users with role ";
  $perm .= preg_replace('/[^a-zA-Z0-9]/', '', $role_name);
  if ($other) {
    $perm .= ' and other roles';
  }
  return $perm;
}
function _administerusersbyrole_can_edit_user($other_uid, $other_roles) {
  $account = \Drupal::currentUser();

  if ($account->id() == $other_uid) {
    return TRUE;
  }

  // allow only uid1 to edit uid1
  if ($other_uid == 1) {
    return FALSE;
  }

  $no_custom_roles = array('authenticated user');
  if (is_array($other_roles) && ($other_roles === $no_custom_roles)) {
    if (!$account->hasPermission('edit users with no custom roles')) {
      return FALSE;
    }
  }

  $allow = TRUE;
  foreach ($account->getRoles() as $rid => $role) {
    if ($rid === DRUPAL_AUTHENTICATED_RID) {
      continue;
    }
    if ($account->hasPermission(_administerusersbyrole_build_perm_string($role, 'edit', TRUE))) {
      return TRUE;
    }
    if (!$account->hasPermission(_administerusersbyrole_build_perm_string($role, 'edit', FALSE))) {
      $allow = FALSE;
    }
  }
  return $allow;

}

function _administerusersbyrole_can_cancel_user($other_uid, $other_roles) {
  $account = \Drupal::currentUser();

  if ($other_uid == 1) {
    return FALSE;
  }

  $no_custom_roles = array('authenticated user');
  if (is_array($other_roles) && ($other_roles === $no_custom_roles)) {
    if (!$account->hasPermission('cancel users with no custom roles')) {
      return FALSE;
    }
  }

  $allow = TRUE;
  foreach ($account->getRoles() as $rid => $role) {
    if ($rid === DRUPAL_AUTHENTICATED_RID) {
      continue;
    }
    if ($account->hasPermission(_administerusersbyrole_build_perm_string($role, 'cancel', TRUE))) {
      return TRUE;
    }
    if (!$account->hasPermission(_administerusersbyrole_build_perm_string($role, 'cancel', FALSE))) {
      $allow = FALSE;
    }
  }
  return $allow;
}